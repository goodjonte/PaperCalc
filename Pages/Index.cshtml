@page
@model IndexModel
@{

}
<script>
    function filterStock() {
        console.log("herhe");
        var selected = document.getElementById("coatSelect").value;
        var options = document.getElementById("stockSelect").options;
        for (var i = 0; i < options.length; i++) {
            if (options[i].className != selected && selected != "") {
                options[i].style.display = "none";
            } else {
                options[i].style.display = "block";
            }
        }
    }
</script>

<form method="post" class="calculationForm">

    <h4 class="calculationTitle">SRA3</h4>

    <!-- Job Details - user first selects new or existing job -->
    <div class="inputRow inputRowWithBorder">

        <!-- JS for showing corresponding elements -->
        @if (Model.JobId != null)
         {
            <script>
                setTimeout(() => {
                    document.getElementById("existingJobSelect").classList.remove("hidden");
                    document.getElementById("newOrExistingJob").classList.add("hidden");
                }, 500);
            </script>
         }
        <script>
            function newJob() {
                document.getElementById("newJobDetails").classList.remove("hidden");
                document.getElementById("newOrExistingJob").classList.add("hidden");
            };
            function existingJob() {
                document.getElementById("existingJobSelect").classList.remove("hidden");
                document.getElementById("newOrExistingJob").classList.add("hidden");
            };
        </script>

        <!--new or existing job -->
        <div id="newOrExistingJob">
            <div class="inputRowTitle">
                <h3>job details</h3>
            </div>
            <div class="jobButtons">
                <div id="newJobButton" onclick="newJob()" class="btn btn-success inputForRow">new job</div>
                <div id="existingJobButton" onclick="existingJob()" class="btn btn-success inputForRow">existing job</div>
            </div>
        </div>

        <!-- existing job select -->
        <div id="existingJobSelect" class="hidden">
            <div class="inputRowTitle">
                <h3>job details</h3>
            </div>
            <div class="inputsForRow">
                <div class="inputForRow">

                </div>
                <div class="inputForRow">
                    <label>select job<span class="requiredStar">*</span></label>
                    <select class="custom-select" asp-for="JobId">
                        <option class="defaultOption" value="">select a job...</option>
                        @{
                            foreach (PaperCalc.Models.Job j in Model.Jobs)
                            {
                                <option value="@j.Id">@j.JobTitle</option>
                            }
                        }
                    </select>
                </div>
                <div class="inputForRow">

                </div>
            </div>
        </div>

        <!-- new job details -->
        <div id="newJobDetails" class="hidden">
            <div class="inputRowTitle">
                <h3>job details</h3>
            </div>
            <div class="inputsForRow">
                <div class="inputForRow">
                    <label>job title<span class="requiredStar">*</span></label>
                    <input placeholder="job title" asp-for="Job.JobTitle" type="text" />
                </div>
                <div class="inputForRow">
                    <label>client name<span class="requiredStar">*</span></label>
                    <input placeholder="client name" asp-for="Job.ClientName" type="text" />
                </div>
                <div class="inputForRow">
                    <label>business name</label>
                    <input placeholder="business name" asp-for="Job.Buissnessname" type="text" />
                </div>
            </div>
        </div>

    </div>

    <!-- Paper -->
    <div class="inputRow inputRowWithBorder">
        <div class="inputRowTitle">
            <h3>paper</h3>
        </div>
        <div class="inputsForRow">
            <div class="inputForRow">
                <label>flat size<span class="requiredStar">*</span></label>
                <select id="FlatSizeSelect" class="custom-select" asp-for="Inputs.FlatSizeId">
                    <option class="defaultOption" value="">select a size...</option>
                    @{
                        foreach (PaperCalc.Models.FlatSize fs in Model.FlatSizes)
                        {
                            <option value="@fs.Id">@fs.Name</option>
                        }
                    }
                    <option class="defaultOption" value="custom">Custom</option>
                </select>
            </div>
            <div class="inputForRow">
                <label>coating<span class="requiredStar">*</span></label>
                <select onchange="filterStock()" id="coatSelect" class="custom-select">
                    <option class="defaultOption" value="">select a coating...</option>
                    <option value="Uncoated">Uncoated</option>
                    <option value="Coated">Coated</option>
                    <option value="Matt">Matt</option>
                    <option value="Satin">Satin</option>
                    <option value="Gloss">Gloss</option>
                </select>
            </div>
            <div class="inputForRow">
                <label>stock<span class="requiredStar">*</span></label>
                <select id="stockSelect" class="custom-select" asp-for="Inputs.StockId">
                    <option class="defaultOption" value="">select stock...</option>
                    @{
                        foreach (PaperCalc.Models.Sra3AndBookletsStock item in Model.Paper)
                        {
                            <option class="@item.CoatType" value="@item.Id">@item.Weight<span>gsm</span> @item.Supplier @item.StockBrand</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div id="hiddenSizeInputs" class="inputsForRow hidden">
            <input asp-for="Inputs.CustomFlatSize" value="false" type="hidden" />
            <div class="inputForRow">
                <label>Width<span class="requiredStar">*</span></label>
                <input placeholder="0" asp-for="Inputs.Width" type="text" />
            </div>
            <div class="inputForRow">
                <label>Height<span class="requiredStar">*</span></label>
                <input placeholder="0" asp-for="Inputs.Height" type="text" />
            </div>
            <div class="inputForRow">
            </div>
        </div>
    </div>

    <!-- Printing -->
    <div class="inputRow inputRowWithBorder">
        <div class="inputRowTitle">
            <h3>printing</h3>
        </div>
        <div class="inputsForRow">
            <div class="inputForRow">
                <label>colour<span class="requiredStar">*</span></label>
                <select class="custom-select" asp-for="Inputs.Colour">
                    <option class="defaultOption" value="false">select a option...</option>
                    <option value="true">Colour</option>
                    <option value="false">Black</option>
                </select>
            </div>
            <div class="inputForRow">
                <label>printed sides<span class="requiredStar">*</span></label>
                <select class="custom-select" asp-for="Inputs.DoubleSided">
                    <option class="defaultOption" value="false">select a option...</option>
                    <option value="false">Single Sided</option>
                    <option value="true">Double Sided</option>
                </select>
            </div>
            <div class="inputForRow">
            </div>
        </div>
    </div>

    <!-- Finishing -->
    <div class="inputRow inputRowWithBorder">
        <div class="inputRowTitle">
            <h3>finishing</h3>
        </div>
        <div class="inputsForRow">
            <div class="inputForRow">
                <label>folds</label>
                <select class="custom-select" asp-for="Inputs.Folds">
                    <option value="0">none</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                </select>
            </div>
            <div class="inputForRow">
                <label>cresaing</label>
                <select class="custom-select" asp-for="Inputs.Creases">
                    <option value="0">none</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                </select>
            </div>
            <div class="inputForRow">
                <label>hole punches</label>
                <select class="custom-select" asp-for="Inputs.HolePunches">
                    <option value="0">none</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                </select>
            </div>
        </div>
        <div class="checkboxesForRow">
            <label class="checkbox">
                lammination
                <input asp-for="Inputs.Lamination" type="checkbox" value="true" />
                <span class="checkmark"></span>
            </label>
        </div>
    </div>

    <!-- Additional Costs -->
    <div class="inputRow inputRowWithBorder">
        <div class="inputRowTitle">
            <h3>additional costs</h3>
        </div>
        <div class="inputsForRow">
            <div class="inputForRow">
                <label>design</label>
                <input placeholder="$00.00" asp-for="Inputs.DesignCost" type="number" />
            </div>
            <div class="inputForRow">
                <label>file handling</label>
                <input type="number" placeholder="$00.00" asp-for="Inputs.FileHandlingCost">
            </div>
            <div class="inputForRow">
                <label>setup</label>
                <input placeholder="$00.00" asp-for="Inputs.SetupCost" type="number" />
            </div>
        </div>
    </div>

    <!-- Delivery & Turnaround -->
    <div class="inputRow inputRowWithBorder">
        <div class="inputRowTitle">
            <h3>delivery & turnaround</h3>
        </div>
        <div class="inputsForRow">
            <div class="inputForRow">
                <label>address</label>
                <input placeholder="address" type="text" />
            </div>
            <div class="inputForRow">
                <label>cost</label>
                <input placeholder="$00.00" type="number" />
            </div>
            <div class="inputForRow">
                <label>turnaround </label>
                <div class="inputWithCheckbox">
                    <input class="turnaroundInput" type="number" />
                    <label class="labelWithinInput">urgent job</label>
                </div>
            </div>
        </div>
    </div>

    <div class="inputRow">
        <div class="inputRowTitle">
            <h3>quantitys</h3>
        </div>
        <div class="inputsForRow">
            <div class="inputForRow">
                <label>quantity<span class="requiredStar">*</span></label>
                <input placeholder="0" type="number" asp-for="Inputs.Quantity">
            </div>
            <div class="inputForRow">
                <label>quantity<span class="requiredStar">*</span></label>
                <input placeholder="1" type="number" asp-for="Inputs.Kinds">
            </div>
            <div class="inputForRow">
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-success calculationSubmitButton marginAuto">generate quote</button>

    @{ if (Model.Calculation != null)
        {
            @*<div>
                    <input asp-for="Quote.save" type="hidden" />
                    <div id="saveButton" class="btn btn-success calculationSubmitButton marginAuto">Save Quote</div>
                    <script>
                        document.getElementById("saveButton").addEventListener("click", function () {
                            document.getElementById("Quote_save").value = true;
                            document.getElementsByClassName("calculationForm")[0].submit();
                        });
                    </script>
                </div>*@

            <div id="calculationPost">

                <dl id="calculationTotals">

                    <dt>Job Cost:</dt>
                    <dd>@Html.DisplayFor(model => Model.Calculation.FinalJobCost)</dd>


                    <dt>Job Cost (GST Inc):</dt>
                    <dd>@Html.DisplayFor(model => Model.Calculation.FinalJobCostWithGst)</dd>

                </dl>

                <div>
                    @*<a class="btn btn-primary" id="showCalculationsButton" data-toggle="collapse" href="#CalculationValues" role="button" aria-expanded="false" aria-controls="CalculationValues">Show Calculation Values</a>*@

                </div>

            </div>

        }
    }


</form>



@*<div id="CalculationValues" class="collapse">

    </div>*@


@*<script>
        function calculationValuesDisplay() {
            let button = document.getElementById("showCalculationsButton");
            let table = document.getElementById("CalculationValues");

            if (button.innerText == "Show Calculation Values") {
                table.classList.remove("hidden");
                button.innerText = "Hide Calculation Values";
            } else if (button.innerText == "Hide Calculation Values") {
                table.classList.add("hidden");
                button.innerText = "Show Calculation Values";
            }
        }
    </script>*@





<!-- Below is the js for creating a word doc quote, need to change this to pdf, it will also be within quote page aswell -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/docxtemplater/3.37.13/docxtemplater.js"></script>
<script src="https://unpkg.com/pizzip@3.1.4/dist/pizzip.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.js"></script>
<script src="https://unpkg.com/pizzip@3.1.4/dist/pizzip-utils.js"></script>
<script>

    const TemplateUrl = window.location.href + "CreateTemplate.docx";

    function getDateString() {
        const now = new Date();
        return (now.getDate() < 10 ? "0" + now.getDate() : now.getDate()) + "/" + ((now.getMonth() + 1) < 10 ? "0" + (now.getMonth() + 1) : (now.getMonth() + 1)) + "/" + now.getFullYear();
    }
    function loadFile(url, callback) {
        PizZipUtils.getBinaryContent(url, callback);
    }
    function getExtras() {
        let foldsNum = document.getElementById("AspeosCalculation_Folds").value > 0 ? "Folding, " : "";
        let creasingNum = document.getElementById("AspeosCalculation_Creasing").value > 0 ? "Creasing, " : "";
        let trimmingBool = document.getElementById("AspeosCalculation_Trimming").checked ? "Trimming, " : "";
        let holePunchBool = document.getElementById("AspeosCalculation_HolePunch").checked ? "Hole Punch, " : "";
        let laminationBool = document.getElementById("AspeosCalculation_Lamination").checked ? "Lamination, " : "";
        let smallJobBool = document.getElementById("AspeosCalculation_SmallJob").checked ? "Small Job, " : "";
        let urgentBool = document.getElementById("AspeosCalculation_Urgent").checked ? "Urgency, " : "";
        let fileHandlingBool = document.getElementById("AspeosCalculation_FileHandling").checked ? "File Handling, " : "";

        let strings = [foldsNum, creasingNum, trimmingBool, holePunchBool, laminationBool, smallJobBool, urgentBool, fileHandlingBool];

        let extrasString = " ";
        for (let i = 0; i < strings.length; i++) {
            console.log("wtf")
            extrasString = extrasString + strings[i];
        }
        return extrasString.slice(0, extrasString.length - 2);

    }
    function getPrinted() {
        var sides = document.getElementById("AspeosCalculation_PrintedSides").value == "single" ? "Single Sided - " : "Double Sided - ";
        var colour = document.getElementById("AspeosCalculation_Colour").value == "colour" ? "Colour" : "Black and White";
        return sides + colour;
    }

    if (document.getElementById("FlatSizeSelect").value == "custom") {
        document.getElementById('hiddenSizeInputs').classList.remove("hidden");
        document.getElementById("AspeosCalculation_CustomSize").value = true;
    }

    document.getElementById("FlatSizeSelect").addEventListener("change", function (e) {
        if (e.target.value == "custom") {
            document.getElementById('hiddenSizeInputs').classList.remove("hidden");
            document.getElementById("AspeosCalculation_CustomSize").value = true;
        } else if (e.target.value != "custom" && !document.getElementById('hiddenSizeInputs').classList.contains("hidden")) {
            document.getElementById('hiddenSizeInputs').classList.add("hidden");
            document.getElementById("AspeosCalculation_CustomSize").value = false;
        }
    });

    window.generate = function generate() {
        loadFile(
            TemplateUrl,
            function (error, content) {
                if (error) {
                    throw error;
                }
                const zip = new PizZip(content);
                const doc = new window.docxtemplater(zip, {
                    paragraphLoop: true,
                    linebreaks: true,
                });

                // Render the document (Replace {first_name} by John, {last_name} by Doe, ...)
                doc.render({
                    date: getDateString(),
                    stock: document.getElementById("AspeosCalculation_CoatingId").options[document.getElementById("AspeosCalculation_CoatingId").selectedIndex].text,
                    printed: getPrinted(),
                    coating: "",
                    extras: getExtras(),
                    size: document.getElementById("AspeosCalculation_FlatSizeId").options[document.getElementById("AspeosCalculation_FlatSizeId").selectedIndex].text,
                    quantity: document.getElementById("AspeosCalculation_Quantity").value,
                    unitPrice: document.getElementById("SheetPrice").innerText,
                    subtotal: document.getElementById("JobCost").innerText,
                    gst: document.getElementById("GST").innerText,
                    total: document.getElementById("JobCostGstInc").innerText,
                });

                const blob = doc.getZip().generate({
                    type: "blob",
                    mimeType:
                        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    // compression: DEFLATE adds a compression step.
                    // For a 50MB output document, expect 500ms additional CPU time
                    compression: "DEFLATE",
                });
                // Output the document using Data-URI
                saveAs(blob, "output.docx");
            }
        );
    };



</script>
